//
//  ActiveAuthenticationTests.swift
//  NFCPassportReaderAppTests
//
//  Created by Paul Philip Mitchell on 29/09/2021.
//  Copyright Â© 2021 Andy Qua. All rights reserved.
//

import Foundation
import XCTest

@testable import NFCPassportReader

final class ActiveAuthenticationTests: XCTestCase {
    private enum PublicKeyType {
        case ecdsa
        case rsa
    }

    func testVerifyAA_RSA_SHA1_PassesAA() {
        let RSAPublicKey = hexRepToBin("6F81A230819F300D06092A864886F70D010101050003818D0030818902818100C7CAA3D820A0504FEE551323CEA9B20A9F75FF14593BD6036BC55275F9F70BF91B061358A103D935C7C0CA48BAAD72546EE20D6F404C835D2BA8FE7C620010A73A5CCDBDBBDEABEAD8542AC612F50C3EC0B79960FC3789E49F0CA4578F80B9AB1EB55947534CD46107FAC83E25A91D9B1AB0BECD968E7F29E6711CE2744FE0250203010001")

        let challenge = hexRepToBin("B815E92986426342")
        let signatureSignedWithSameRSAKey = hexRepToBin("7B8241D373AAD605AF3C4816219C936689E2F2E2FA47BC98A990B73ACD22684F40FDF5B7572088086DCAECB73BCA14B4E0E5893A24A413EB65E5C8CF1EFB72AC0B03B8E1DC88E321B9A9AB4E704D35E3786B5B7A7CA879BFDD96565F813D0DCC3AE6E51354CF5527EE560CABAE0C6E328917DC3C7A9A0EA530CD37451CF746DC")

        testVerifyAA(dg15Data: RSAPublicKey,
                     challenge: challenge,
                     signature: signatureSignedWithSameRSAKey,
                     expectedResult: true)
    }

    func testVerifyAA_RSA_SHA256_PassesAA() {
        let RSAPublicKey = hexRepToBin("6F81E23081DF300D06092A864886F70D01010105000381CD003081C90281C100EF6C628E8648752026330BC18BE5F64070B93DB661301A94CBE2F97BE3CC8D1B79822D847200C32C691BA5E6A814EAF28F4F3028F0CA845C011D708E62F8A442244D11D59D06F7F73EF48CC27D1F014AA386B0F3E77B03A4F8022BA69A1556CBA7122B43C495159C630D7FAB095B56A9F45750CE5B1483999EE1025BFC7553521F5C84A127D6CC6DE37487BDEE14334AF68FA555A30B95D9D45188A83036C9D9BB681AABBA1F39AB6559A2FCC74CBF6A3A7C0C8E3571D6EE958EE33E5CCF93090203010001")

        let challenge = hexRepToBin("1F7731904AF32896")
        let signatureSignedWithSameRSAKey = hexRepToBin( "469DD9E02F692779D5EC6864C4ADE6D1F50C0790C5A99A3A4BD8AA5F4BC63BCF47A9FC8771322ED9CD7D8CF0ED851631EDE9FCCAA18B17D4650653E4D41A5BD4E293BBAC617730D19A1312FC538EBDEF462291AA0A38FAA9099CECEE17787F8631007F696478BFE37BFA144DB597AF1657B71D4074221E37BB4A31A0AE557D505C98564DA0EB18640EDFEF4F4CBDB947D543470B61B08E541D677AEADCAA2264A004953753181E125925A6684208319A0FAE9A6A245963B2A594055D9B457185")

        testVerifyAA(dg15Data: RSAPublicKey,
                     challenge: challenge,
                     signature: signatureSignedWithSameRSAKey,
                     expectedResult: true)
    }

    func testVerifyAA_RSA_SHA256_InvalidPublicKey_DoesNotPassAA() {
        let invalidRSAPublicKey = hexRepToBin("6F81E23081DF300D06092A864886F70D01010105000381CD003081C90281C100EF6C628E8648752026330BC18BE5F64070B93DB661301A94CBE2F97BE3CC8D1B79822D847200C32C691BA5E6A814EAF28F4F3028F0CA845C011D708E62F8A442244D11D59D06F7F73EF48CC27D1F014AA386B0F3E77B03A4F8022BA69A1556CBA7122B43C495159C630D7FAB095B56A9F45750CE5B1483999EF1025BFC7553521F5C84A127D6CC6DE37487BDEE14334AF68FA555A30B95D9D45188A83036C9D9BB681AABBA1F39AB6559A2FCC74CBF6A3A7C0C8E3571D6EE958EE33E5CCF93090203010001")

        let challenge = hexRepToBin("1F7731904AF32896")
        let signatureSignedWithOtherRSAKey = hexRepToBin("469DD9E02F692779D5EC6864C4ADE6D1F50C0790C5A99A3A4BD8AA5F4BC63BCF47A9FC8771322ED9CD7D8CF0ED851631EDE9FCCAA18B17D4650653E4D41A5BD4E293BBAC617730D19A1312FC538EBDEF462291AA0A38FAA9099CECEE17787F8631007F696478BFE37BFA144DB597AF1657B71D4074221E37BB4A31A0AE557D505C98564DA0EB18640EDFEF4F4CBDB947D543470B61B08E541D677AEADCAA2264A004953753181E125925A6684208319A0FAE9A6A245963B2A594055D9B457185")

        testVerifyAA(dg15Data: invalidRSAPublicKey,
                     challenge: challenge,
                     signature: signatureSignedWithOtherRSAKey,
                     expectedResult: false)
    }

    // TODO: RSA-SHA224?, RSA-SHA384?, RSA-SHA512, ECDSA, ECDSA_INVALIDPUBKEY

    private func testVerifyAA(dg15Data: [UInt8], keyType: PublicKeyType = .rsa, challenge: [UInt8], signature: [UInt8], expectedResult: Bool) {
        let dg15 = try? DataGroup15(dg15Data)

        if keyType == .rsa {
            XCTAssertTrue(dg15?.rsaPublicKey != nil)
        } else {
            XCTAssertTrue(dg15?.ecdsaPublicKey != nil)
        }

        let model = NFCPassportModel()
        model.addDataGroup(.DG15, dataGroup: dg15!)

        model.verifyActiveAuthentication(challenge: challenge, signature: signature)

        if expectedResult {
            XCTAssertTrue(model.activeAuthenticationStatus == .success)
        } else {
            XCTAssertFalse(model.activeAuthenticationStatus == .success)
        }
    }
}
